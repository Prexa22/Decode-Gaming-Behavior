Q1) Extract P_ID,Dev_ID,PName and Difficulty_level of all players 
at level 0

SELECT PD.P_ID, LD.Dev_ID, PD.PName, LD.Difficulty
FROM player_details PD
JOIN level_details LD ON PD.P_ID = LD.P_ID
WHERE LD.[Level] = 0

Q2) Find Level1_code wise Avg_Kill_Count where lives_earned is 2 and atleast
3 stages are crossed

SELECT T2.L1_Status, AVG(Kill_Count)
FROM level_details T1
JOIN player_details T2 ON T1.P_ID = T2.P_ID
WHERE T1.Lives_Earned = 2 AND T1.Stages_crossed >= 3
GROUP BY T2.L1_Status

Q3) Find the total number of stages crossed at each diffuculty level
where for Level2 with players use zm_series devices. Arrange the result
in decsreasing order of total number of stages crossed.

SELECT Difficulty, SUM(Stages_crossed) AS SUM_of_Stages_crossed_byDifficulty 
FROM level_details
WHERE [Level] = 2 AND Dev_ID LIKE 'zm_%'
GROUP BY Difficulty
ORDER BY SUM(Stages_crossed) DESC

Q4) Extract P_ID and the total number of unique dates for those players 
who have played games on multiple days.

SELECT P_ID, COUNT(DISTINCT([Timestamp])) AS UniqueDates
FROM level_details
GROUP BY P_ID
HAVING COUNT(DISTINCT([Timestamp]))>1

Q5) Find P_ID and level wise sum of kill_counts where kill_count
is greater than avg kill count for the Medium difficulty.

SELECT P_ID, [Level], SUM(Kill_Count) AS Sum_of_kill_counts
FROM level_details
WHERE Kill_Count > (
			SELECT AVG(Kill_Count) 
			FROM level_details
		    	WHERE Difficulty = 'Medium'
		   )
GROUP BY P_ID, [Level]

Q6)  Find Level and its corresponding Level code wise sum of lives earned 
excluding level 0. Arrange in asecending order of level.

SELECT [Level], L1_Code, L2_Code,
SUM(Lives_Earned) AS SUM_of_Lives_Earned
FROM Level_details LD
JOIN player_details PD ON LD.P_ID = PD.P_ID
WHERE [Level] <> 0
GROUP BY [Level], PD.L1_Code, PD.L2_Code
ORDER BY [Level]

Q7) Find Top 3 score based on each dev_id and Rank them in increasing order
using Row_Number. Display difficulty as well. 

SELECT dev_id, Score, Difficulty, RowNumber
FROM 
(
	SELECT dev_id, Score, Difficulty, 
	ROW_NUMBER() OVER (PARTITION BY dev_id ORDER BY Score DESC) AS RowNumber
	FROM level_details
) T2
WHERE T2.RowNumber <= 3

Q8) Find first_login datetime for each device id

SELECT Dev_ID, MIN([TimeStamp]) AS First_login_datetime
FROM level_details
GROUP BY Dev_ID

Q9) Find Top 5 score based on each difficulty level and Rank them in 
increasing order using Rank. Display dev_id as well.

SELECT Difficulty, Score, DEV_ID, RANK_NO
FROM
(
	SELECT Difficulty, SCORE, DEV_ID, 
	RANK() OVER (PARTITION BY Difficulty ORDER BY SCORE DESC) AS RANK_NO
	FROM level_details LD
) T1
WHERE RANK_NO <= 5
ORDER BY DIFFICULTY, RANK_NO

Q10) Find the device ID that is first logged in(based on start_datetime) 
for each player(p_id). Output should contain player id, device id and 
first login datetime.

SELECT P_ID, Dev_ID, MIN([TimeStamp]) AS First_login_datetime
FROM level_details
GROUP BY P_ID, Dev_ID

Q11) For each player and date, how many kill_count played so far by the player.
That is, the total number of games played 
by the player until that date.
a) window function
b) without window function

a) window function

SELECT DISTINCT P_ID, CAST([TimeStamp] AS DATE) AS [DATE], 
SUM(Kill_Count) OVER (PARTITION BY P_ID, CAST([TimeStamp] AS DATE) ORDER BY CAST([TimeStamp] AS DATE)) AS Total_Kill_Count
FROM level_details
ORDER BY P_ID, CAST([TimeStamp] AS DATE)--, Total_Kill_Count

b) without window function

SELECT P_ID, CAST([TimeStamp] AS DATE) AS [DATE], 
SUM(Kill_Count) AS Total_Kill_Count
FROM level_details
GROUP BY P_ID, CAST([TimeStamp] AS DATE)
ORDER BY P_ID, CAST([TimeStamp] AS DATE)

Q12) Find the cumulative sum of stages crossed over a start_datetime 

SELECT SUM(Stages_crossed) AS SUM_Stages_crossed, TimeStamp
FROM(
		SELECT Stages_crossed, TimeStamp, 
		ROW_NUMBER() OVER (ORDER BY TimeStamp DESC) RowNumber
		FROM level_details
	) T2
GROUP BY TimeStamp
ORDER BY SUM_Stages_crossed DESC

Q13) Find the cumulative sum of an stages crossed over a start_datetime 
for each player id but exclude the most recent start_datetime

SELECT P_ID, SUM(Stages_crossed) AS SUM_Stages_crossed, TimeStamp
FROM(
		SELECT P_ID, Stages_crossed, TimeStamp, 
		ROW_NUMBER() OVER (PARTITION BY P_ID ORDER BY TimeStamp DESC) RowNumber
		FROM level_details
	) T2
WHERE RowNumber > 1
GROUP BY P_ID, TimeStamp
ORDER BY P_ID, SUM_Stages_crossed DESC

Q14) Extract top 3 highest sum of score for each device id and the 
corresponding player_id

SELECT Dev_ID, P_ID, Sum_of_Score_forDev_IDandP_ID
FROM
(
	SELECT Dev_ID, P_ID, SUM(Score) AS Sum_of_Score_forDev_IDandP_ID,
	ROW_NUMBER() OVER (PARTITION BY Dev_ID ORDER BY SUM(Score) DESC) AS ROWNUMBER
	FROM Level_details
	GROUP BY Dev_ID, P_ID
)T1
WHERE ROWNUMBER <= 3

Q15) Find players who scored more than 50% of the avg score scored by sum of 
scores for each player_id

SELECT P_ID, SUM(Score) AS Sum_of_Score
FROM Level_details
GROUP BY P_ID
HAVING SUM(Score) > (50 * (SELECT AVG(Score) FROM level_details)/100)

Q16) Create a stored procedure to find top n headshots_count based on 
each dev_id and Rank them in increasing order
using Row_Number. Display difficulty as well.

ALTER PROC [dbo].[Proc_Top_n_Headshot_Count]
(
	@n INT
)
AS
BEGIN
	SELECT dev_id, Headshots_Count, Difficulty
	FROM 
	(
		SELECT dev_id, Headshots_Count, Difficulty, 
		ROW_NUMBER() OVER (PARTITION BY dev_id ORDER BY Headshots_Count) AS RowNumber
		FROM level_details
	) T2
	WHERE T2.RowNumber <= @n
	ORDER BY dev_id, T2.RowNumber


/*

	EXEC [Proc_Top_n_Headshot_Count] @n = 6

*/

END

Q17) Create a function to return sum of Score for a given player_id.

ALTER FUNCTION [dbo].[Sum_of_Score]
(
	@player_id INT
)
RETURNS INT
AS
BEGIN
	DECLARE @Sum_of_Score INT 

	SELECT @Sum_of_Score = SUM(LD.Score)
	FROM level_details LD
	WHERE LD.P_ID = @player_id
	GROUP BY LD.P_ID

	RETURN @Sum_of_Score

/*

SELECT [dbo].[Sum_of_Score] (644)

*/

END
